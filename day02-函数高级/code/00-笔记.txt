1、函数基础
1.1 函数的创建
  >> 函数声明
    function 函数名() {}

  >> 函数表达式（箭头函数也属于这种）
    var 变量名 = function() {}

1.2 函数参数
  >> 形参
    创建函数时，设置的未知数。

  >> 实参
    调用函数时，给形参传递的数据。

  >> 参数默认值
    function 函数名(参数=默认值) {}

1.3 arguments 对象
  类似数组结构，保存了调用函数时传递的实参。

1.4 函数类型
  >> 返回值函数
    在函数中使用了 return 关键字，该关键字会返回后面的数据，并且之后的代码不会执行了。

  >> 匿名函数
    就是指没有名字的函数，函数表达式都是。

  >> 具名函数
    所有的声明都是具名。

  >> 回调函数
    setTimeout(function() {}, 0)

    fs.readFile(url, options, function() {})

1.5 IIFE
  >> 概念
    即立即执行函数表达式，属于匿名函数，创建后就会自动运行，且只能运行一次。

  >> 写法
    (function() {
      // 代码
    })()

    // or 
    (function() {
      // 代码
    }())

  >> 作用
    由于是函数，IIFE 中代码执行完毕后，内部的变量会销毁，就不会污染全局环境。

1.6 递归函数
  >> 概念
    在函数内部调用自己的一种场景。

  >> 写法
    function foo() {
      // ... 一堆逻辑
      foo();
    }

  >> 注意事项
    * 必须设置进口与出口，否则陷入死循环

  >> 应用
    * 如何利用 setTimeout 实现 setInterval 的功能
    * 多级菜单、树形菜单；
    * 累加、累乘；

1.7 惰性载入
用于减少每次执行代码时的重复性分支判断，通过对原函数或者源对象进行重新定义来避免。