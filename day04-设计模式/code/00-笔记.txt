1、设计模式
1.1 理解
有助于写出可复用可维护性的代码。

  >> 高内聚

  >> 低耦合

1.2 设计原则
  * 单一职责
  * 最少知识原则
  * 开发-封闭原则

1.3 种类
  23 种设计模式。

2、工厂模式
2.1 理解
  是为了解决多个类似对象声明的问题，解决对象实例化过程中产生的重复问题。

3、单例模式
3.1 理解
用于保证一个类只有一个实例，并提供一个访问它的权限。

3.2 实现思路
  如果已经存在就返回，否则新建。

3.3 大概的实现方式
  function Single() {}

  Single.getTinstance = function() {
    if(!this.instance) {
      this.instance = new Single();
    }
    return this.instance;
  }

3.4 应用场景
  模态框、loading

4、策略模式
4.1 理解
定义了一系列的算法，把他们一个个的封装起来，并且使他们可以相互替换。

4.2 案例
// 公司根据员工的表现发放年终奖

function nianzhong(level, salary) {
  if(level === 's') {
    return salary * 4;
  } else if(level === 'a') {
    return salary * 2
  } else if(level === 'b') {
    return salary * 1
  }  else if(level === 'c') {
    return 0
  } else {
    return -salary;
  }
}

// 优化
nianzhong = {
  s: function() {
    return salary * 4;
  },
  a: function() {
    return salary * 2;
  },
  b: function() {
    return salary * 1;
  }
}

nianzhong['s']()