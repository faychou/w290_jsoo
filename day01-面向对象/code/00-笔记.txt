1、Symbol(es6)
1.1 概念
>> 基本数据类型
String, // new String()
Number, // new Number()
Boolean, // new Boolean()
Undefined,
Null,
Symbol

>> 引用数据类型
Object（Array, Function）// new Object(), new Array(), new Function()

Symbol 是ES6引入得一种基本数据类型，表示独一无二得值。

1.2 语法
  let s1 = Symbol(); // 注意，这里不添加 new 关键字

1.3 注意事项
  * Symbol 是基本数据类型；
  * Symbol 返回得值是唯一得；
  * Symbol不支持 new Symbol 得写法；
  * 不能通过 for in 等访问。

1.4 用途
一般用在对象属性上，可以确保该属性永远不可能被覆盖。

let username = Symbol();
let obj = {
  [username]: 'jack'
}
obj[username]

2、Object
2.1 创建

2.2 对象的属性
  对象.属性名 = 属性值； // 注意事项：该属性名应该是字符串，而不能出现变量
  对象['属性名'] = 属性值；

2.3 对象方法
  let obj = {
    sayHi: function() {}
  }

  // 方法简写
  let obj = {
    sayHi() {}
  }

  // 还可以这么写，但是不常用
  let obj = {
    sayHi: () => {}
  }

2.4 对象的遍历
  >> for in 
    for(var i in obj ) {}

  >> Object.keys(obj)
    以数组的形式返回对象所有的属性名。

  >> Object.values(obj)
    以数组的形式返回对象所有的属性值。

  共同点：不能遍历 Symbol 属性的。

2.5 销毁对象
obj = null; // 销毁对象
obj.age = null; // 删除属性值
obj.age = ''; // 属性值为空字符串
delete obj.age; // 删除该属性

3、堆栈（重难点）
3.1 什么是堆栈
  堆和栈都是在运行时内存中分配的一个存储区域。

  在 JS 中所有的数据类型都是存放在堆区域中或者 栈区域中。

3.2 堆栈如何存储数据
  >> 栈区
    基本数据类型的只是直接存储在栈中的，直接访问值。

    基本数据类型的值的复制：会在栈中创建一个新值，然后把值复制到新创建的变量上，两个值之间互相不影响。

  >> 堆区 
    对象的值是保留存在堆区中的，会在栈中存储一个指向堆空间的地址，然后把这个地址复制给变量。

3.3 对象的复制 
  >> 浅拷贝
    只能拷贝一层，如果该对象的属性也是一个对象，那么还是复制的指针，而不是重新创建的。

    ...
    Object.assign()
    数组所有的拷贝方法都是浅拷贝；

  >> 深拷贝
    完全复制对象下的每一个属性。

    * JOSN.strigify()：最简单的方法，但是无法拷贝 方法和 undefined
    * jQuery 的 extends 方法；
    * lodash 函数库的 cloneDeep 方法；
    * 手写一个 - 递归调用每一个对象的属性

4、面向对象（重难点）
4.1 两大概念
  是把问题分解为各个对象，是为了描述该对象所拥有的行为，可扩展性更强，代码的重用性更高。

  >> 类
    看作是一个抽象的对象，把拥有共同特征的事物进行了抽象。（人类）

  >> 对象(类的实例)
    实实在在的事物。

4.2 构造函数
  // 类 
  function Person(name, age) {
    this.name = name;
    this.age = age;
  }

  // 实例化 - 对象 
  let obj = new Person();

4.3 对象识别
  instanceof 

4.4 方法过载
  在构造函数中直接定义方法，在实例化对象时会单独创建对象，每一个对象指向不同的空间地址，所以该方法相当于重复创建了，浪费了资源。

5、原型（重难点）
5.1 概念
在 JS 中，每一个 函数 都有一个属性，该属性名为 prototype，是一个指针，指向该函数的原型 对象，而该对象上所有的属性和方法都可以被该函数的 实例 继承。

5.2 原型访问
  函数.prototype.属性/方法 

  实例.属性/方法

5.3 constructor
  函数的原型上有一个 constructor 属性，是一个函数，指向当前构造函数本身。

  console.log(Person.prototype.constructor === Person); // true

5.4 __proto__
  每个实例对象都有一个 __proto__ 属性，指向他的构造函数的原型。

  console.log(obj1.__proto__ === Person.prototype); // true

  Person.__proto__ // Function
  Function.__proto__ // Object
  Object.__proto__ // null
  Person.prototype.__proto__ // Object

5.5 原型链
当访问对象属性的时候，如果在当前对象内部，无法找到该属性，那么会在他的原型上寻找该属性，那么原型上该属性也不存在，就会在原型的原型上寻找，如此循环下去，直到找到该属性或者到达顶层对象。在查找对象属性的过程中形成的链条就称为原型链。

5.6 原型的应用
  >> 扩展内置构造函数
    Array.prototype.del = function (index) {
      this.splice(index, 1);
    }

    let arr = ['a', 'b', 'c', 'd', 'e', 'f'];

    arr.del(1);

  >> 简单封装一个 dom 操作
    

6、this(重难点)
6.1 理解
  当函数在被调用的时候，会创建一个活动记录（也称为执行上下文），这个记录会包含函数在哪里调用，调用的方法，传入的参数等等信息。this 就是这个执行上下文 其中一个属性，会在函数执行的过程中用到。

  this 在非严格模式下，总是指向一个对象，在严格模式下可以是任意值。

  总之 this 是一个指针，是在运行时绑定的，而不是在编写时绑定的，所以 this 永远指向最后调用它的对象。

6.2 调用位置
  function baz() {
    // 调用栈：baz
    bar(); // bar调用位置
  }

  function bar() {
    // 调用栈：baz -> bar
    foo(); // foo 的调用位置
  }

  function foo() {
    // 调用栈：baz -> bar -> foo
  }

  window.baz();

  6.3 this 的指向
  6.3.1 默认指向
  严格模式下绑定到 undefined，非严格模式下绑定到全局 window 。

  function foo() {
    // 'use strict'; // 加了这一句代码，this 就是 undefined
    console.log(this); // window
  }
  foo();

  6.3.2 构造函数中的 this
  如果函数是通过 new 调用的，this 就指向构造函数中默认创建的对象。

  6.3.3 隐式指向
    当函数引用的时候，有上下文对象时，就会把 this 绑定到该对象上。

    const obj = {
      name: 'jack',
      sayHi() {
        console.log('Hi', this.name);
      }
    }
    obj.sayHi(); // Hi jack 

    // 有多个上下文对象时，只看最后一个调用位置
    function sayHi() {
      console.log('Hi', this.name);
    }
    const obj2 = {
      name: 'john',
      sayHi
    }
    const obj1 = {
      name: 'jack',
      obj2
    }
    obj1.obj2.sayHi(); // Hi john

    // 隐式丢失
    const obj = {
      name: 'john',
      sayHi() {
        console.log('Hi', this.name);
      }
    }
    const hi = obj.sayHi;
    window.name = 'window name';
    hi(); // Hi window name

    const obj = {
      name: 'john',
      sayHi() {
        window.setTimeout(function () {
          console.log('Hi', this.name);
        })
      }
    }
    window.name = 'window name';
    obj.sayHi(); // Hi window name

  6.3.4 显示指向
    >> call、apply、bind

    >> 箭头函数
      箭头函数中是没有 this 绑定的，内部的 this 是指向 箭头函数所在的作用域。

      所以箭头函数中 this 指向定义箭头函数时的位置，而不是调用箭头函数的位置。

6.4 call、apply、bind
  >> fn.call(obj, 参数1, 参数2, ...)
    是指将函数 fn 内部的 this 指向 obj 对象，并且立即调用该函数，并且参数1,参数2 等传给该函数。

    let p1 = {
      name: '周瑜',
      phone(time, name) {
        console.log(this.name + '给' + name + '打了' + time + '个小时电话');
      }
    }


    let p2 = {
      name: '曹操'
    }
    p1.phone.call(p2, 24, '小乔'); // 立即调用 phone 函数，并且临时性将该函数内的 this 指向 p2 

  >> fn.apply(obj, [参数1, 参数2])
    作用与 call 相同，只是参数传递方式不一样。

    p1.phone.call(p2, 24, '小乔');

  >> fn.bind(obj, 参数)
    将 fn 内部的 this 指针永远指向 obj，但是不会默认执行。

    let p2 = {
      name: '曹操'
    }

    let p1 = {
      name: '周瑜',
      phone: function (time, name) {
        console.log(this.name + '给' + name + '打了' + time + '个小时电话');
      }.bind(p2) // 改变 this，但是不会执行函数
    }
    p1.phone();

  >> 区别
    * call 和 aplly 都是临时性修改 this 指向；
    * call 和 aplly 都会立即执行一次当前函数；
    * bind 是被动执行，不会主动调用函数；
    * bind 会永久性修改 this 指向；
    * bind 一般用于回调函数中；
    * call 与 apply 的唯一区别是参数传递方式不一样。